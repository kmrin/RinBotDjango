services:
  postgres:
    container_name: "RinBot-DB"
    image: postgres:16
    env_file:
      - .env
    ports:
      - ${POSTGRES_PORT}:5432
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - rinbot-network

  lavalink:
    container_name: "RinBot-Lavalink"
    image: ghcr.io/lavalink-devs/lavalink:4
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./rinbot/lavalink/plugins:/opt/Lavalink/plugins
      - ./rinbot/lavalink/config/lavalink.yml:/opt/Lavalink/application.yml
      - instance_data:/var/lib/rinbot
    expose:
      - ${LAVALINK_PORT}
    networks:
      - rinbot-network

  django:
    container_name: "RinBot-Django"
    build:
      context: .
      dockerfile: Dockerfile.django
    env_file:
      - .env
    volumes:
      - ./rinbot:/app
      - instance_data:/var/lib/rinbot
    ports:
      - ${DJANGO_PORT}:8000
    depends_on:
      postgres:
        condition: service_healthy
      lavalink:
        condition: service_started
    restart: unless-stopped
    networks:
      - rinbot-network

volumes:
  instance_data:
    name: rinbot-instance-data
  postgres_data:
    name: rinbot-db-data

networks:
  rinbot-network:
    driver: bridge
